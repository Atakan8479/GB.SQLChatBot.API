apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gb-sqlchatbot-service.name" . }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 1
  selector:
    matchLabels:
      {{- include "gb-sqlchatbot-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "gb-sqlchatbot-service.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - name: {{ include "gb-sqlchatbot-service.name" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag}}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.volumeMounts }}
        volumeMounts:
          {{- include "gb-sqlchatbot-service.tplvalues.render" ( dict "value" .Values.volumeMounts "context" $) | nindent 8 }}
        {{- end }}
        
        {{- with .Values.envVars }}
        env:
        - name: OTEL_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: SERVICE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ParsCore_ThreadPoolMinWorkerThreads
          value: "200"
        - name: ParsCore_ThreadPoolMinCompletionPortThreads
          value: "200"
        - name: ConfigSource
          valueFrom:
            secretKeyRef:
              key: ConfigSource
              name: gbsqlchatbot-common 
          {{- toYaml . | nindent 8 }}
        {{- end }}

        livenessProbe: # is the container healthy?
          tcpSocket:
            port: 8080
          timeoutSeconds: 15
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
          initialDelaySeconds: 1
        readinessProbe: # is the container ready to receive traffic?
          httpGet:
            port: 8080
            path: /ping
          timeoutSeconds: 15
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
          initialDelaySeconds: 1
        startupProbe:
          httpGet:
            path: /startup/init
            port: 8080
            scheme: HTTP
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 15
          periodSeconds: 20
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        
        securityContext:
          runAsUser: 2000
          allowPrivilegeEscalation: false

      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.volumes }}
      volumes:
        {{- include "gb-sqlchatbot-service.tplvalues.render" ( dict "value" .Values.volumes "context" $) | nindent 8 }}
      {{ end }}  